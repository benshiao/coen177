/* Name: Benjamin Shiao
# Date: 4/21/20
# Title: Lab4 â€“ Developing multi-threaded applications
# Description: report on lab 4
*/

Step 1: Running the original helloThread.c file printed hello and return statements from 20 threads. The return statements are numbered 0-20, but the hello statements are random numbers, with some numbers inbetween missing or duplicates of each other. The hello and return statements were a bit shuffled as well. Running it multiple times had similar results but the hello thread numbers and thread IDs were different(sometimes negative), with the thread numbers following the pattern I mentioned. After all hello and returns, a 'main thread done' prints. If you are running some other demanding process while running this program, the full output from all 20 threads take longer to print/run/complete.
The go() function arg paramter is for variables in threads that are seperate for each thread, storing them on the serpate stacks for each thread. While address space and Heap are shared for different threads, their stacks are seperate, so each thread creates a copy of a variable passed in args, which are all copies of an address in this code.
The main local variable i is shared state because it passes in the address of i into all the threads, so all the threads point at the same variable i. It is a static variable which is stored in the data region by the compiler.

Step 2: This code would print hello statements from 20 threads, numbered between 1-20, and numbered 0 should be possible. The threads say hello out of order, the thread IDs are different, sometimes negative, and the 'Main Thread done.' statement sometimes prints before all the hello prints come out. There are no return prints, as I removed them with the thread join loop. This happens because the threads run on their own, with different speeds, accessing all the same variable address of i. Without the thread join statements, the main thread is able to complete even before the other threads start, which is the cause of 'main thread done' printing before all other threads print hello.

Step 3:
