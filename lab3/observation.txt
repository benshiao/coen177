# Name: Benjamin Shiao
# Date: 4/14/20
# Title: Lab3 – Pthreads and inter-process Communication – Pipes
# Description: Observation file for lab 3

Step 1: Running the C file in step 1 basically just ran the ls linux command.

Step 2: Running the C file in step 2 would print "writer on the upstream end of the pipe <number of arguements>" and also print the command and all arguements spaced out character by character after "reader on the downstream end of the pipe. For example, i named the file step2.c and when i ran it as "./step2 hi dog" it printed "Writer on the upstream end of the pipe -> 3 arguments \n\nReader on the downstream end of the pipe\n. / s t e p 2 h i d o g". It seems like this file takes my input arguements, prints how many it sees and then it prints my input with the spaced out format.

Step 3: I edited the code to the writer process passes the output of “ls” command to the upstream end of the pipe and when I ran my resulting file in step 3, it would print out the same output as linux command ls, but it spaced out every character with a space and didn't print my extra input/arguements, but did print the number of arguements I gave it. Now instead of printing my input, this file takes input from the ls command. While it still counts and prints my number of arguements, it not longer outputs my input with the spaced out format.
example, running "./step3 hello" printed the following:
Writer on the upstream end of the pipe -> 2 arguments 

Reader on the downstream end of the pipe 
o b s e r v a t i o n . t x t 
 s t e p 1 
 s t e p 1 . c 
 s t e p 2 
 s t e p 2 . c 
 s t e p 3 
 s t e p 3 . c 
 
 Step 4:
 
 
 Step 5:
 
 
 Step 6: Running the file runs 10 threads, numbered 0-9. I get the first few print statements as Hello from thread <thread number> with iteration <x>, where x is a number 0-9, sometimes repeated and doesnt cover all numbers 0-9. The middle few statements are a mix of the hello statements and thread <number 0-9 in order> returned. Then the end few statements are the last few threads returning. Basically I get Hellos from threads of random numbers that aren't properly ordered or covering all numbers 0-9, then some threads start returning while other threads are still saying hello, then the last few threads return. The Hello from thread statements are not propery numbered while the Thread return statements are properly numbered. This is probably because the return threads are from the for loop number in the main() function while the Hello thread numbers are from the thread function passed in the pthread_create(&threads[i], NULL, go, &i); line of code. Because the threads share the same memory, they are accessing the same variable at address of i, making the hello statements have inconsitent numbers. To be specific, one run of this file had hello from threads numbered 3,6,4,4,5,3,7,0,9,8 and returns of 0-9. Because threads don't run exactly one by one, they are accessing and changing the variable i at times out of order
